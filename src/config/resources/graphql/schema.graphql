# siehe app.module.ts

schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Bücherdaten zu lesen"
type Query {
  buecher(suchkriterien: SuchkriterienInput): [Buch!]

  buch(id: ID!): Buch
}

"Funktionen, um Bücher neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: BuchInput!): CreatePayload

  update(input: BuchUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, wenn z.B. der Login-Zeitpunkt im IDM-System gespeichert wird
  token(username: String!, password: String!): TokenResult
  refresh(refresh_token: String!): TokenResult
}

"Daten zum Titel eines Buches"
type Titel {
  titel: String!
  untertitel: String
}

"Daten zum Titel eines Buches"
type Abbildung {
  beschriftung: String!
  contentType: String
}

"Datenschema zu einem Buch, das gelesen wird"
type Buch {
  # ID ist bei Apollo ein String
  id: Int!
  version: Int!
  isbn: String!
  rating: Int
  art: Art
  preis: Float!
  lieferbar: Boolean
  datum: String
  homepage: String
  schlagwoerter: [String]
  # 1:1-Beziehung
  titel: Titel!
  # field mit @ResolveField
  rabatt(short: Boolean): String!
}

"Enum-Typ für die Art eines Buches"
enum Art {
  EPUB
  HARDCOVER
  PAPERBACK
}

"Suchkriterien für Bücher"
input SuchkriterienInput {
  titel: String
  isbn: String
  rating: Int
  art: Art
  lieferbar: Boolean
}

"Daten zum Titel eines neuen Buches"
input TitelInput {
  titel: String!
  untertitel: String
}

"Daten zu den Abbildungen eines Buches"
input AbbildungInput {
  beschriftung: String!
  contentType: String!
}

"Daten für ein neues Buch"
input BuchInput {
  isbn: String
  rating: Int
  art: Art
  preis: Float
  rabatt: Float
  lieferbar: Boolean
  datum: String
  homepage: String
  schlagwoerter: [String]
  titel: TitelInput!
  abbildungen: [AbbildungInput!]
}

type CreatePayload {
  id: Int
}

"Daten für ein zu änderndes Buch"
input BuchUpdateInput {
  id: ID
  version: Int
  isbn: String
  rating: Int
  art: Art
  preis: Float
  rabatt: Float
  lieferbar: Boolean
  datum: String
  homepage: String
  schlagwoerter: [String]
}

type UpdatePayload {
  version: Int
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
}
