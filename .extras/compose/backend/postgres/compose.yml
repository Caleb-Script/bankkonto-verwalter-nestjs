
services:
  db:
    # https://github.com/docker-library/postgres/blob/master/16/bookworm/Dockerfile
    image: postgres:16.4-bookworm
    ports:
      - published: 5432
        target: 5432
    # https://dev.to/danvixent/how-to-setup-postgresql-with-ssl-inside-a-docker-container-5f3
    # https://gist.github.com/mrw34/c97bb03ea1054afb551886ffc8b63c3b
    # https://stackoverflow.com/questions/55072221/deploying-postgresql-docker-with-ssl-certificate-and-key-with-volumes
    command: >
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/certificate.crt
      -c ssl_key_file=/var/lib/postgresql/key.pem
    volumes:
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/data
        target: /var/lib/postgresql/data
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/postgresql.conf
        target: /etc/postgresql/postgresql.conf
        read_only: true
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/tablespace
        target: /var/lib/postgresql/tablespace
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/tls/key.pem
        target: /var/lib/postgresql/key.pem
        read_only: true
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/tls/certificate.crt
        target: /var/lib/postgresql/certificate.crt
        read_only: true
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/run
        # .s.PGSQL.5432.lock
        target: /var/run/postgresql
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/csv
        target: /csv
        read_only: true
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/sql
        target: /sql
        read_only: true
    env_file: .env
    user: 'postgres:postgres'
    security_opt:
      - label:user:postgres
      - no-new-privileges:true
    hostname: postgres
    container_name: postgres
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#cap_add-cap_drop
    cap_drop: [ALL]
    #cap_add: [CHOWN, SETGID, SETUID, DAC_OVERRIDE, NET_BIND_SERVICE, CAP_FOWNER]
    healthcheck:
      test: [CMD, pg_isready, --dbname=postgres, --username=postgres]
      interval: 5s
      timeout: 2s
      start_period: 5s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 512M

  # ------------------------------------------------------------------------------------
  # p g a d m i n
  # ------------------------------------------------------------------------------------
  # http://localhost:8888 mit Emailadresse "pgadmin@acme.com" und Passwort "p"
  pgadmin:
    image: dpage/pgadmin4:8.12.0
    ports:
      - published: 8888
        target: 80
    volumes:
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/pgadmin
        # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
        # enthaelt u.a. pgadmin4.db als SQLite-DB mit z.B. der Tabelle "user"
        target: /var/lib/pgadmin
      - type: bind
        source: /Users/gentlebookpro/Projekte/UNI/SWE/zimmermann/volumes/postgres/pgadmin4
        target: /var/lib/pgadmin4
    env_file: pgadmin.env
    user: 'pgadmin:5050'
    hostname: pgadmin
    container_name: pgadmin
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#cap_add-cap_drop
    cap_drop: [ALL]
    # https://man7.org/linux/man-pages/man7/capabilities.7.html
    # setgid
    # find '/var/lib/...'
    # find '/var/spool/...'
    # /venv/bin/python3
    # /venv/bin/gunicorn
    cap_add: [CHOWN, SETGID, SETUID, DAC_OVERRIDE, NET_BIND_SERVICE]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
