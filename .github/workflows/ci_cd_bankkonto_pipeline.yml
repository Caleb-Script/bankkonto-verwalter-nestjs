# name: CI/CD Pipeline Docker + Kubernetes

# on:
#   push:
#     branches:
#       - main
#     tags:
#       - 'v*' # Nur Versionstags (z.B. v1.0.0)
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [20.x, 22.x, 23.x]
#     steps:
#       - name: Checkout code
#         # uses: actions/checkout@v4

#       - name: Setup Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: 'npm'  # Cache für schnelleres Build

#       # - name: Cleanup previous builds
#       #   run: |
#       #     rm -rf node_modules dist .extras/doc/api .extras/doc/folien/folien.html .extras/doc/projekthandbuch/html

#       - name: Install dependencies
#         run: npm ci

#       - name: Build project
#         run: npm run build

#       - name: Compile TypeScript
#         run: npx tsc

#       - name: Upload dist folder
#         uses: actions/upload-artifact@v4
#         with:
#           name: dist-${{ matrix.node-version }}
#           path: dist

#   analyze:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [20.x, 22.x, 23.x]
#     needs: build
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: 'npm'

#       - name: Install dependencies
#         run: npm ci

#       - name: Lint code
#         run: npm run eslint

#       - name: Security audit
#         run: npm audit --omit=dev

#       - name: Generate documentation (TypeDoc)
#         run: npm run typedoc

#       # - name: Generate slides (reveal.js)
#       #   run: npm run revealjs

#       # - name: Compile AsciiDoc
#       #   run: npm run asciidoctor

#   package:
#     runs-on: ubuntu-latest
#     needs: [build, analyze]
#     strategy:
#       matrix:
#         node-version: [20.x, 22.x, 23.x]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Download dist folder
#         uses: actions/download-artifact@v4
#         with:
#           name: dist-${{ matrix.node-version }}
#           path: dist

#       - name: Package distribution
#         run: zip -r dist.zip dist

#       - name: Upload package
#         uses: actions/upload-artifact@v4
#         with:
#           name: dist-package-${{ matrix.node-version }}
#           path: dist.zip

#   docker:
#     runs-on: ubuntu-latest
#     needs: package
#     steps:
#       - name: Build Docker image
#         run: "echo 'TODO: Docker-Image bauen und veroeffentlichen'"

#   deploy:
#     runs-on: ubuntu-latest
#     needs: docker
#     steps:
#       - name: Deploy to Kubernetes
#         run: "echo 'TODO: Deployment für Kubernetes durchführen'"
