name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Nur für Versionstags (z.B. v1.0.0)

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x, 23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Compile TypeScript
        run: npx tsc

      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist

  analyze:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [20.x, 22.x, 23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run eslint

      - name: Security audit
        run: npm audit --omit=dev

      - name: Generate documentation (TypeDoc)
        run: npm run typedoc

  package:
    runs-on: ubuntu-latest
    needs: [build, analyze]
    strategy:
      matrix:
        node-version: [20.x, 22.x, 23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist

      - name: Package distribution
        run: zip -r dist.zip dist

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: dist-package-${{ matrix.node-version }}
          path: dist.zip

  docker:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Build Docker image
        run: "echo 'TODO: Docker-Image bauen und veroeffentlichen'"

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Deploy to Kubernetes
        run: "echo 'TODO: Deployment für Kubernetes durchführen'"
