name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Nur f√ºr Versionstags (z.B. v1.0.0)

# node-version: [20.x, 22.x, 23.x]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Compile TypeScript
        run: npx tsc

      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist

      - name: zip node_modules
        run: zip -r nm.zip node_modules

      - name: Upload node_modules folder
        uses: actions/upload-artifact@v4
        with:
          name: node_modules-${{ matrix.node-version }}
          path: nm.zip

  analyze:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Download node_modules folder
        uses: actions/download-artifact@v4
        with:
          name: node_modules-${{ matrix.node-version }}
          path: nm.zip

      - name: unzip node_modules
        run: unzip nm.zip

      - name: Lint code
        run: npm run eslint

      - name: Security audit
        run: npm audit --omit=dev

      - name: Generate documentation (TypeDoc)
        run: npm run typedoc

  package:
    runs-on: ubuntu-latest
    needs: [build, analyze]
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist

      - name: Package distribution
        run: zip -r dist.zip dist

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: dist-package-${{ matrix.node-version }}
          path: dist.zip

  docker:
    runs-on: ubuntu-latest
    needs: package
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist

      - name: Download node_modules folder
        uses: actions/download-artifact@v4
        with:
          name: node_modules-${{ matrix.node-version }}
          path: nm.zip

      - name: unzip node_modules
        run: unzip nm.zip

      - name: Build Docker image
        run: docker build -t gruppe-4/bankkonto:2024.10.1 .

      - name: Push Docker image to registry
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
          docker push gruppe-4/bankkonto:2024.10.1

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Deploy to Kubernetes
        run: |
          echo "Starting deployment..."
          kubectl apply -f config.yaml
