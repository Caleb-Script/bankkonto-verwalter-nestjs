name: Test Pipeline

on:
  push:
    branches:
      - 60-dockerfile-bugfix # Trigger
  workflow_dispatch:

jobs:
  kubernetes_cleanup:
    name: Cleanup Kubernetes Resources
    runs-on: [self-hosted,kubernetes]
    if: github.actor == 'Caleb-Script'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes context
        run: |
          # Setze den kubectl Kontext auf deinen lokalen Docker Desktop Cluster
          kubectl config use-context docker-desktop

      - name: Delete Kubernetes Resources
        run: |
          cd .extras/kubernetes
          kubectl delete namespace bankkonto-namespace || true
          kubectl delete persistentvolume postgres-pv-data || true
          kubectl delete persistentvolume postgres-pv-tablespace || true
          kubectl delete persistentvolume postgres-pv-csv || true
          kubectl delete persistentvolume postgres-pv-sql || true
          kubectl delete persistentvolume postgres-pv-config || true
          kubectl delete persistentvolume postgres-certs-pv || true
          kubectl delete persistentvolume pgadmin-pv || true
          kubectl delete persistentvolume pgadmin4-pv || true
          kubectl delete persistentvolume kc-data-pv || true

  start_postgres:
    name: Start PostgreSQL
    if: github.actor == 'Caleb-Script'
    needs: kubernetes_cleanup
    runs-on: [self-hosted,postgres]
    steps:
      - name: Start PostgreSQL container
        run: |
          cd .extras/compose/backend/postgres
          docker-compose up

  start_keycloak:
    if: github.actor == 'Caleb-Script'
    name: Start Keycloak
    needs: kubernetes_cleanup
    runs-on: [self-hosted,keycloak]
    steps:
      - name: Start Keycloak container
        run: |
          cd .extras/compose/backend/keycloak
          docker-compose up

  test:
    name: Test (lokal) on node ${{ matrix.node-version }}
    runs-on: [self-hosted,test]
    needs: kubernetes_cleanup
    if: github.actor == 'Caleb-Script'
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Print ref name
        run: echo "This workflow was triggered by ${{ github.ref_name }}"

      - name: Print actor (Collaborator)
        run: echo "The actor is ${{ github.actor }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: kp
        run: pwd

      - name: Install dependencies
        run: npm ci

      - name: Create log file
        run: |
          mkdir -p log
          touch log/server.log

      - name: Set up TLS files from secrets
        env:
          TLS_KEY: ${{ secrets.TLS_KEY }}
          TLS_CERT: ${{ secrets.TLS_CERT }}
        run: |
          echo "$TLS_KEY" > src/config/resources/tls/key.pem
          # echo "$TLS_CERT" > src/config/resources/tls/certificate.crt

      # - name: Run Tests with Jest (Integrationstests)
      #   run: |
      #     cd .github/actions-runner/_work/bankkonto-verwalter-nestjs/bankkonto-verwalter-nestjs
      #     npm t
      #   working-directory: .github/actions-runner/_work/bankkonto-verwalter-nestjs/bankkonto-verwalter-nestjs

      # - name: Run Tests npm run test:istanbul (Testabdeckung)
      #   run: |
      #     cd .github/actions-runner/_work/bankkonto-verwalter-nestjs/bankkonto-verwalter-nestjs
      #     npm run test:istanbul
      #   working-directory: .github/actions-runner/_work/bankkonto-verwalter-nestjs/bankkonto-verwalter-nestjs

      # - name: Upload Jest Test Coverage
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: jest-coverage-${{ matrix.node-version }}-${{ matrix.os }}
      #     path: ./coverage
      - name: fahre Postgres runter
        run: |
          cd .extras/compose/backend/postgres
          docker-compose down

      - name: fahre keycloak runter
        run: |
          cd .extras/compose/backend/keycloak
          docker-compose down

  # security:
    # name: Security Scans (Docker Scout, Trivy, OWASP Dependency Check)
    # runs-on: ubuntu-latest
    # needs: test
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4

    #   - name: Install Docker
    #     run: |
    #       sudo apt-get update
    #       sudo apt-get install -y docker.io

    #   - name: Docker Scout Scan
    #     run: |
    #       docker scan --file Dockerfile .

    #   - name: Install Trivy
    #     run: |
    #       curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.34.0/trivy_0.34.0_Linux-x86_64.tar.gz | tar xz
    #       sudo mv trivy /usr/local/bin/

    #   - name: Trivy Security Scan
    #     run: |
    #       trivy fs . --exit-code 1 --severity HIGH,CRITICAL

    #   - name: Install OWASP Dependency-Check
    #     run: |
    #       curl -L https://github.com/jeremydmiller/dotnet-dependency-check/releases/download/7.1.0/dependency-check-7.1.0.zip -o dependency-check.zip
    #       unzip dependency-check.zip -d dependency-check
    #       chmod +x dependency-check/bin/dependency-check.sh
    #       sudo mv dependency-check /usr/local/bin/

    #   - name: Run OWASP Dependency Check
    #     run: |
    #       dependency-check/bin/dependency-check.sh --project "NestJS Application" --scan . --format "HTML" --out dependency-check-report

    #   - name: Upload Dependency Check Report
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: owasp-dependency-check-report
    #       path: ./dependency-check-report/*.html

  lint:
    name: Linting and Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run eslint  # Linting-Befehl, um Code-Qualität zu prüfen
