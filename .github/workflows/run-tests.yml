name: Test Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  kubernetes_cleanup:
    name: Cleanup Kubernetes Resources
    runs-on: [self-hosted]
    if: github.actor == 'Caleb-Script'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubernetes context
        run: |
          # Setze den kubectl Kontext auf deinen lokalen Docker Desktop Cluster
          kubectl config use-context docker-desktop

      - name: Delete Kubernetes Resources
        run: |
          cd .extras/kubernetes
          kubectl delete namespace bankkonto-namespace || true
          kubectl delete persistentvolume postgres-pv-data || true
          kubectl delete persistentvolume postgres-pv-tablespace || true
          kubectl delete persistentvolume postgres-pv-csv || true
          kubectl delete persistentvolume postgres-pv-sql || true
          kubectl delete persistentvolume postgres-pv-config || true
          kubectl delete persistentvolume postgres-certs-pv || true
          kubectl delete persistentvolume pgadmin-pv || true
          kubectl delete persistentvolume pgadmin4-pv || true
          kubectl delete persistentvolume kc-data-pv || true

  test:
    name: Test (lokal)
    runs-on: [self-hosted]
    needs: kubernetes_cleanup
    if: github.actor == 'Caleb-Script'

    steps:
      - name: Print ref name
        run: echo "This workflow was triggered by ${{ github.ref_name }}"

      - name: Print actor (Collaborator)
        run: echo "The actor is ${{ github.actor }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Create log file
        run: |
          mkdir -p log
          touch log/server.log

      - name: Set up TLS files from secrets
        env:
          TLS_KEY: ${{ secrets.TLS_KEY }}
          TLS_CERT: ${{ secrets.TLS_CERT }}
        run: |
          echo "$TLS_KEY" > src/config/resources/tls/key.pem
          # echo "$TLS_CERT" > src/config/resources/tls/certificate.crt

      - name: Set up ENV files from secrets
        env:
          KEYCLOAK_ENV: ${{ secrets.KEYCLOAK_ENV }}
          POSTGRES_ENV: ${{ secrets.POSTGRES_ENV }}
        run: |
          cd .extras/compose/backend
          echo "$KEYCLOAK_ENV" > keycloak/.env
          echo "$POSTGRES_ENV" > postgres/.env

      - name: Start Keycloak container
        run: |
          cd .extras/compose/backend
          docker-compose up -d

      - name: Jest Config aus Secret setzen
        run: echo "${{ secrets.JEST_CONFIG }}" > .jest.config.js


      - name: Run Integration Tests with Jest
        run: npm t || true

      - name: Run Coverage Tests with Istanbul
        run: npm run test:istanbul || true

      - name: Upload Jest Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: jest-coverage
          path: ./coverage

      - name: fahre keycloak und postgres runter
        run: |
          cd .extras/compose/backend/keycloak
          docker-compose down


  security:
    name: Security Scans (Docker Scout, Trivy, OWASP Dependency Check, SonarQube, Snyk)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Caching)
        run: npm ci

      - name: Install OWASP Dependency-Check
        run: |
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v11.1.0/dependency-check-11.1.0-release.zip -o dependency-check-11.1.0-release.zip
          unzip dependency-check-11.1.0-release.zip -d dependency-check
          chmod +x dependency-check/dependency-check.sh
          sudo mv dependency-check /usr/local/bin/

      - name: Run OWASP Dependency Check
        run: |
          dependency-check/bin/dependency-check.sh --project "Bankkonto" --scan . --nvd-api-key b7a34389-9698-4691-972c-3b333871a7a6 --format "HTML" --out dependency-check-report

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: ./dependency-check-report/*.html

      - name: Set up SonarQube
        uses: sonarsource/sonarcloud-github-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


      - name: Run SonarQube Scan
        run: |
          sonar-scanner -Dsonar.projectKey=your_project_key -Dsonar.organization=your_organization

      - name: Authenticate with Snyk
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Test
        run: |
          snyk test --all-projects


  lint:
    name: Linting and Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run eslint  # Linting-Befehl, um Code-Qualität zu prüfen
