name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Nur fÃ¼r Versionstags (z.B. v1.0.0)
  schedule:
    - cron: "0 2 * * 1-5"

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    outputs:
      node-modules-path: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

  build:
    runs-on: ubuntu-latest
    needs: install-dependencies
    outputs:
      dist-path: ${{ steps.cache.outputs.cache-hit }}
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install-dependencies.outputs.node-modules-path }}

      - name: Build project
        run: npm run build

      - name: Cache dist folder
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-dist-${{ hashFiles('**/package-lock.json') }}

  analyze:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.build.outputs.dist-path }}

      - name: Lint code
        run: npm run eslint

      - name: Security audit
        run: npm audit --omit=dev

      - name: Generate documentation (TypeDoc)
        run: npm run typedoc

  package:
    runs-on: ubuntu-latest
    needs: [build, analyze]
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore dist from cache
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ needs.install-dependencies.outputs.node-modules-path }}

      - name: Package distribution
        run: zip -r dist.zip dist

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: dist-package-${{ matrix.node-version }}
          path: dist.zip

  docker:
    runs-on: ubuntu-latest
    needs: package
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install-dependencies.outputs.node-modules-path }}

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-package-${{ matrix.node-version }}
          path: ./

      - name: Unzip dist folder
        run: unzip dist.zip -d ./dist

      - name: Create .env file
        run: |
          echo "NODE_ENV=development" >> .env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
          echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> .env
          echo "SNYK_TOKEN=${{ secrets.SNYK_TOKEN }}" >> .env

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=development \
            --build-arg CLIENT_SECRET=${{ secrets.CLIENT_SECRET }} \
            --build-arg SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
            --build-arg SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} \
            -t gruppe-4/bankkonto:2024.10.1 .

      - name: Clean up .env file
        run: rm .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to registry
        run: |
          docker tag gruppe-4/bankkonto:2024.10.1 calebscript/bankkonto-verwalter:2024.10.1
          docker push calebscript/bankkonto-verwalter:2024.10.1 || exit 1

  deploy:
    runs-on: [self-hosted]
    if: github.actor == 'Caleb-Script'
    needs: docker
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Docker Image
        run: docker pull calebscript/bankkonto-verwalter:2024.10.1

      - name: Remove unused Docker images
        run: docker image prune -f

      - name: Set up Kubernetes context
        run: |
          # Setze den kubectl Kontext auf deinen lokalen Docker Desktop Cluster
          kubectl config use-context docker-desktop

      - name: Apply Postgres PersistentVolume
        run: |
          cd .extras/kubernetes
          kubectl apply -f ./persistent-volumes --namespace=bankkonto-namespace
          kubectl apply -f ./namespace.yml --namespace=bankkonto-namespace
          kubectl apply -f ./postgres --namespace=bankkonto-namespace
          kubectl apply -f ./keycloak --namespace=bankkonto-namespace
          kubectl apply -f ./pgadmin --namespace=bankkonto-namespace
          kubectl apply -f ./bankkonto --namespace=bankkonto-namespace

      - name: Wait for Deployment Rollout
        run: |
          kubectl rollout status deployment/bankkonto-app -n bankkonto-namespace
